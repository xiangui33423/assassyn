---
alwaysApply: true
---

# Write Good Code

This document discusses several key rules of writing good code:

1. When introducing a new wrapper like below, ask yourself do we really need such an indirection.
   - Is it because our interface design is poor? If so, report it in a summary when acting on a TODO.

```python
def foo_wrapper(a):
    foo(a, 0)
```

2. When writing a set of repeat code, consider to refine a unified interface. If you write a repeat code
   twice, you have a chance to write it more times. If similar code is distributed everywhere, you need
   to modify it everywhere, which not only worsens the readability but also lengthens the contexts.
   - However, focus on one thing at a time. If you realize it is a over engineering, report it in a TODO summary.

3. Focus on thing for each module. If a module is originally designed for a purpose, do not borrow its code
   path for anything else, unless the addition is a part of feature extension closely related to this module.

4. DO NOT hard code. If you have a constant value defined for a specific purpose, when used do not hard code
   its literal value.
   - Is is possible to make this value a constant variable and use this variable?
   - Is it possible to change it to a enum to avoid other mistakes?

5. Low invasion. Every time you make a mofication, carefully control the files are affective.
   Unless you are sure you are told to do an interface refactor, make sure all the modifications
   should be inside the module and the interface exposed by the module.